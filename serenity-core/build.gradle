import org.apache.tools.ant.filters.*

ext {
    bintrayPackage = 'serenity-core'
}

jar {
    manifest {
        attributes("Implementation-Title": "Serenity Core",
                "Implementation-Version": project.version.toString())
    }
}

//integrationTests {
//    beforeTest { desc, result ->
//        println "Executing test ${desc.name} [${desc.className}]"
//    }
//    afterTest { desc, result ->
//        println "Finished test ${desc.name} [${desc.className}] with result: ${result.resultType}"
//    }
//}
//
//test {
//    afterTest { desc, result ->
//        println "Executing test ${desc.name} [${desc.className}] with result: ${result.resultType}"
//    }
//}
dependencies {

    compile project(':serenity-report-resources')

    compile("junit:junit:4.12")
    compile("org.slf4j:slf4j-api:1.7.21")
    compile("org.hamcrest:hamcrest-core:1.3")
    compile("org.hamcrest:hamcrest-library:1.3")
    compile("joda-time:joda-time:2.7")//For one single use..
    compile("com.google.guava:guava:21.0")
    compile("com.google.code.gson:gson:2.6.1")
    compile("org.apache.commons:commons-lang3:3.4")
    compile("commons-codec:commons-codec:1.10")//For one single use...
    compile("info.cukes:cucumber-core:1.2.5")
    compile('net.bytebuddy:byte-buddy:1.6.12')
    compile('commons-collections:commons-collections:3.2.2')
    compile('commons-io:commons-io:2.5')
    compile('net.sf.opencsv:opencsv:2.0')
    compile('com.typesafe:config:1.2.1')
    compile ('com.thoughtworks.xstream:xstream:1.4.7') {
        exclude group: 'xmlpull', module: 'xmlpull'
    }
    //awt dependency compile('org.imgscalr:imgscalr-lib:4.2')
//    compile project(':serenity-core')
    testCompile project(':serenity-junit')
    testCompile("org.mockito:mockito-core:1.10.19")
    testCompile ('org.assertj:assertj-core:1.7.1'){
        exclude group: 'com.google.guava'
    }
    testCompile('org.spockframework:spock-core:1.1-groovy-2.4-rc-4') {
        exclude group: "junit"
        exclude module: "groovy-all"
        exclude group: 'com.google.guava'
    }
}

processResources {
    filter ReplaceTokens, tokens: [
            "application.version": "" + version
    ]
}

task writeNewPom << {
    pom {
        project {
            inceptionYear '2011'
            licenses {
                license {
                    name 'The Apache Software License, Version 2.0'
                    url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    distribution 'repo'
                }
            }
        }
    }.writeTo("pom.xml")
}
